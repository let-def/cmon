unit:
()

false:
false

true:
true

0:
0

1:
1

2:
2

-1:
-1

-2:
-2

0.:
0.

1.:
1.

-0.:
-0.

-1.:
-1.

+inf:
infinity

-inf:
neg_infinity

nan:
nan

max_float:
1.79769313486231571e+308

min_float:
2.22507385850720138e-308

'a':
'a'

'\x00':
'\000'

'\xFF':
'\255'

'\t':
'\t'

'\n':
'\n'

"foo":
"foo"

"\"foo\"":
"\"foo\""

"foo\nbar":
"foo\nbar"

(1, true):
(1, true)

(1, true, ...):
(1, true, 1, true, 1, true)

(1, true, ..., ...):
(
  1,
  true,
  1,
  true,
  1,
  true,
  1,
  true,
  1,
  true,
  1,
  true,
  1,
  true,
  1,
  true,
  1,
  true
)

[1; true]:
[ 1; true ]

[1; true; ...]:
[ 1; true; 1; true; 1; true ]

[1; true; ...; ...]:
[
  1;
  true;
  1;
  true;
  1;
  true;
  1;
  true;
  1;
  true;
  1;
  true;
  1;
  true;
  1;
  true;
  1;
  true
]

1 :: true :: xs:
1 :: true :: xs

1 :: true :: ... :: xs:
1 :: true :: 1 :: true :: 1 :: true :: xs

1 :: true :: ... ... :: xs:
1
:: true
:: 1
:: true
:: 1
:: true
:: 1
:: true
:: 1
:: true
:: 1
:: true
:: 1
:: true
:: 1
:: true
:: 1
:: true
:: xs

nested-1:
[ ([ (); [] ], ([], ())); [ ([], ()); [ (); [] ] ] ]

nested-2:
(
  [
    (
      [ ([ (); [] ], ([], ())); [ ([], ()); [ (); [] ] ] ],
      ([ ([], ()); [ (); [] ] ], ([ (); [] ], ([], ())))
    );
    [
      ([ ([], ()); [ (); [] ] ], ([ (); [] ], ([], ())));
      [ ([ (); [] ], ([], ())); [ ([], ()); [ (); [] ] ] ]
    ]
  ],
  (
    [
      ([ ([], ()); [ (); [] ] ], ([ (); [] ], ([], ())));
      [ ([ (); [] ], ([], ())); [ ([], ()); [ (); [] ] ] ]
    ],
    (
      [ ([ (); [] ], ([], ())); [ ([], ()); [ (); [] ] ] ],
      ([ ([], ()); [ (); [] ] ], ([ (); [] ], ([], ())))
    )
  )
)

data-constructors-1:
(None, Some (), Pair (1, 2))

data-constructors-2:
(None, Some (), Pair (1, 2))

record-1:
{ contents = 1; }

record-2:
{ a = 1; b = true; }

record-3:
{ a = 1; b = true; a = 1; b = true; a = 1; b = true; }

record-4:
{
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
}

inline-record-1:
R1 { contents = 1; }

inline-record-2:
R2 { a = 1; b = true; }

inline-record-3:
R3 { a = 1; b = true; a = 1; b = true; a = 1; b = true; }

inline-record-4:
R4 {
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
  a = 1;
  b = true;
}

shared-terms:
let v0 = let v1 = ("test", 1) in (v1, v1) in
(let v2 = let v3 = ("test", 1) in (v3, v3) in (v2, v2, v0), v0)

rec-term1:
let rec v0 = 1 :: v0 in
v0

rec-term2:
let rec v0 = 1 :: 2 :: v0 in
v0

rec-term4:
let rec v0 = 1 :: 2 :: v0 in
v0

rec-term4':
let rec v0 = 1 :: v1 and v1 = 2 :: v0 in
(v0, v1)

rec-term5:
let rec v0 = 1 :: v1 and v1 = 2 :: v0 in
let v2 = ("test", 1) in
(v0, v1, v2, v2)

rec-term6:
let v0 = ("test", 1) in
let rec v1 = v0 :: v2 and v2 = v0 :: v1 in
(v1, v2)

binding-group:
let v0 = K A and v1 = K B in
let rec v2 = v0 :: v3 and v3 = v1 :: v2 in
let v4 = K C in
(v0, v1, v2, v3, v4, v4)

regression-test-scope-limit:
let v0 = Block (0, Done) in
let v1 = blockTag v0 and v2 = blockFields v0 in
or (
  and (= (v1, 0), (_ is (Done () Fields)) v2),
  let v3 = fieldNext v2 in
  and (
    = (v1, 1),
    (_ is (Done () Fields)) (fieldNext v3),
    (_ is (Field (Value Fields) Fields)) v3,
    (_ is (Field (Value Fields) Fields)) v2
  )
)

